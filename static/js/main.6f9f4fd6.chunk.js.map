{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/algorithms.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","neighbors","filter","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift","start","end","PathfindingVisualizer","algorithmChange","e","target","value","clearBoard","setState","algoValue","state","wallValue","mouseIsPressed","movingStart","movingEnd","visualized","getInitialGrid","newGrid","getNewGridWithWallToggled","toggleStart","toggleEnd","removeWalls","endNode","document","getElementById","previous","node_wall","node_start","node_end","i","setTimeout","animateShortestPath","Math","random","text","animate","visitedNodesInOrder_DFS","unvisited","vistedNodesInOrder","pop","DFS","nodesInShortestPathOrder_DFS","visitedNodesInOrder_BFS","BFS","nodesInShortestPathOrder_BFS","class","Fragment","CssBaseline","AppBar","Toolbar","style","backgroundColor","Typography","variant","title","Select","native","label","onChange","Button","onClick","visualize","color","randomWall","resetBoard","map","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6f9f4fd6.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? 'node-finish'\r\n      : isStart\r\n      ? 'node-start'\r\n      : isWall\r\n      ? 'node-wall'\r\n      : '';\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}></div>\r\n    );\r\n  }\r\n}\r\n","export function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (unvisitedNodes.length !== 0) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (closestNode.isWall) continue;\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nexport function DFS(grid, startNode, endNode){\r\n  const unvisited = [];\r\n  const vistedNodesInOrder = [];\r\n  startNode.isVisited = true;\r\n  startNode.previousNode = null;\r\n  unvisited.push(startNode);\r\n  vistedNodesInOrder.push(startNode);\r\n  while(unvisited.length !== 0){\r\n      const currentNode = unvisited.pop();\r\n      if(currentNode === endNode){\r\n          return vistedNodesInOrder;\r\n      }\r\n      currentNode.isVisited = true;\r\n      vistedNodesInOrder.push(currentNode);\r\n      let neighbors = getUnvisitedNeighbors(currentNode, grid);\r\n\r\n      for (const neighbor of neighbors) {\r\n        neighbor.previousNode = currentNode;\r\n        unvisited.push(neighbor);\r\n      }\r\n    }\r\n  return vistedNodesInOrder;\r\n}\r\n\r\nexport function BFS(grid, startNode, endNode){\r\n  const unvisited = [];\r\n  const visitedNodesInOrder = [];\r\n  startNode.isVisited = true;\r\n  startNode.previous = null;\r\n  unvisited.push(startNode);\r\n  visitedNodesInOrder.push(startNode);\r\n  while(unvisited.length !== 0){\r\n    let currentNode = unvisited.shift();\r\n    if(currentNode === endNode){\r\n      return visitedNodesInOrder;\r\n    }\r\n    let neighbors = getUnvisitedNeighbors(currentNode, grid);\r\n    for(const neighbor of neighbors){\r\n      neighbor.isVisited = true;\r\n      neighbor.previousNode = currentNode;\r\n      unvisited.push(neighbor);\r\n      visitedNodesInOrder.push(neighbor);\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  let neighbors = [];\r\n  const {col, row} = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  neighbors = neighbors.filter(neighbor => !neighbor.isVisited);\r\n  return neighbors.filter((neighbor) => !neighbor.isWall);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nexport function getNodesInShortestPathOrder(startNode,finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null && currentNode !== startNode) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  nodesInShortestPathOrder.unshift(startNode);\r\n  return nodesInShortestPathOrder;\r\n}\r\n","import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\nimport {dijkstra, getNodesInShortestPathOrder, DFS, BFS} from '../algorithms/algorithms';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Button from '@material-ui/core/Button';\r\nimport './PathfindingVisualizer.css';\r\nimport Select from '@material-ui/core/Select';\r\n\r\n//Total number of rows and cols of the grid\r\nlet rows = 20;\r\nlet cols = 50;\r\n\r\n//Default positions for the start and end node \r\nlet start = [10,10];\r\nlet end = [10, 40];\r\n\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      algoValue: \"Dijkstra\",\r\n      wallValue: \"None\",\r\n      start: start,\r\n      end: end,\r\n      mouseIsPressed: false,\r\n      movingStart: false,\r\n      movingEnd: false,\r\n      visualized: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({grid});\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    const {grid, start, end, visualized} = this.state;\r\n    if(visualized) return;\r\n    if(start && end){\r\n      if(row === start[0] && col === start[1]){\r\n        this.setState({movingStart: true});\r\n      }\r\n      else if(row === end[0] && col === end[1]){\r\n        this.setState({movingEnd: true});\r\n      }\r\n      else{\r\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n        this.setState({grid: newGrid, mouseIsPressed: true});\r\n      }\r\n      this.setState({grid:grid, mouseIsPressed: true});\r\n    }\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    const {\r\n      start,\r\n      end, \r\n      mouseIsPressed,\r\n      movingStart,\r\n      movingEnd,\r\n      visualized,\r\n    } = this.state;\r\n    if (!mouseIsPressed || visualized) return;\r\n    if(start && end){\r\n      if(movingStart){\r\n        toggleStart(this.state.grid, row, col);\r\n        toggleStart(this.state.grid, start[0], start[1]);\r\n        this.setState({start: [row, col], movingStart: true});\r\n      }\r\n      else if(movingEnd){\r\n        toggleEnd(this.state.grid, row, col);\r\n        toggleEnd(this.state.grid, end[0], end[1]);\r\n        this.setState({end: [row, col], movingEnd: true});\r\n      }\r\n      else{\r\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n        this.setState({grid: newGrid, mouseIsPressed: true});\r\n      }\r\n    }\r\n  }\r\n\r\n  handleMouseUp() {\r\n    const {visualized} = this.state;\r\n    if(visualized) return;\r\n    this.setState({mouseIsPressed: false, movingStart: false, movingEnd: false});\r\n  }\r\n  \r\n  clearBoard(){\r\n    const { visualized } = this.state;\r\n    if (visualized) {\r\n      return;\r\n    }\r\n    this.unvisitedNodes(\r\n      true,\r\n      start,\r\n      end\r\n    );\r\n    this.setState({\r\n      start: start,\r\n      end: end,\r\n    });\r\n  }\r\n\r\n  resetBoard(){\r\n    const { visualized } = this.state;\r\n    if (visualized) {\r\n      return;\r\n    }\r\n    this.unvisitedNodes(\r\n      false,\r\n      start,\r\n      end\r\n    );\r\n    this.setState({\r\n      start: start,\r\n      end: end,\r\n    });\r\n  }\r\n\r\n  unvisitedNodes(removeWalls, startNode, endNode){\r\n    const { grid } = this.state;\r\n    for(let row = 0; row < rows; row++){\r\n      for(let col = 0; col < cols; col++){\r\n        let node = grid[row][col];\r\n        if(node){\r\n          const nodes = document.getElementById(`node-${node.row}-${node.col}`);\r\n          if(nodes){\r\n            nodes.className = \"node\";\r\n          }\r\n          node.isVisited = false;\r\n          node.previous = null;\r\n          node.distance = Infinity;\r\n          if(removeWalls){\r\n            node.isWall = false;\r\n          }\r\n          else if(node.isWall){\r\n            const node_wall = document.getElementById(`node-${node.row}-${node.col}`);\r\n            if(node_wall){\r\n              node_wall.className = \"node node-wall\";\r\n            }\r\n          }\r\n          if(row === startNode[0] && col === startNode[1]){\r\n            const node_start = document.getElementById(`node-${startNode[0]}-${startNode[1]}`);\r\n            if(node_start){\r\n              node_start.className = \"node node-start\";\r\n            }\r\n            node.isStart = true;\r\n          }\r\n          if(row === endNode[0] && col === endNode[1]){\r\n            const node_end = document.getElementById(`node-${endNode[0]}-${endNode[1]}`);\r\n            if(node_end){\r\n              node_end.className = \"node node-finish\";\r\n            }\r\n            node.isFinish = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.setState({grid: grid, visualized: false});\r\n  }\r\n\r\n  animate(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 5 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-visited';\r\n      }, 5 * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-shortest-path';\r\n      }, 35 * i);\r\n    }\r\n  }\r\n\r\n  algorithmChange = (e) =>{\r\n    if(e.target && e.target.value){\r\n      this.clearBoard();\r\n      this.setState({algoValue: e.target.value});\r\n    }\r\n  };\r\n\r\n  randomWall(){\r\n    const { grid } = this.state;\r\n        for(let row = 0; row < rows; row++){\r\n          for(let col = 0; col < cols; col++){\r\n            if((Math.random() <= 0.1 || Math.random() >= 0.85) && !grid[row][col].isStart && !grid[row][col].isFinish){\r\n              getNewGridWithWallToggled(grid, row, col);\r\n            }\r\n          }\r\n        }\r\n        this.setState({grid:grid});\r\n  }\r\n\r\n  visualize(text) {\r\n    const{ grid, start, end } = this.state;\r\n    if(grid && start && end){\r\n      this.unvisitedNodes(false, start, end);\r\n      let startNode = grid[start[0]][start[1]];\r\n      let finishNode = grid[end[0]][end[1]];\r\n      if(startNode.isWall){\r\n        startNode.isWall = !startNode.isWall;\r\n      }\r\n      if(finishNode.isWall){\r\n        finishNode.isWall = !finishNode.isWall;\r\n      }\r\n      switch(text){\r\n        case \"Dijkstra\":\r\n          let visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n          let nodesInShortestPathOrder = getNodesInShortestPathOrder(startNode, finishNode);\r\n          this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n          break;\r\n\r\n        case \"DFS\":\r\n          let visitedNodesInOrder_DFS = DFS(grid, startNode, finishNode);\r\n          let nodesInShortestPathOrder_DFS = getNodesInShortestPathOrder(startNode, finishNode);\r\n          this.animate(visitedNodesInOrder_DFS, nodesInShortestPathOrder_DFS);\r\n          break;\r\n\r\n        case \"BFS\":\r\n          let visitedNodesInOrder_BFS = BFS(grid, startNode, finishNode);\r\n          let nodesInShortestPathOrder_BFS = getNodesInShortestPathOrder(startNode, finishNode);\r\n          this.animate(visitedNodesInOrder_BFS, nodesInShortestPathOrder_BFS);\r\n          break;\r\n\r\n        default: \r\n          return;\r\n      }\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    const {grid, mouseIsPressed} = this.state;\r\n    return (\r\n      <div class = \"background\">\r\n        <React.Fragment>\r\n        <CssBaseline />\r\n        <AppBar>\r\n          <Toolbar style = {{backgroundColor: \"grey\"}}>\r\n            <Typography variant=\"h5\" title = \"Click to visit the home screen\">Pathfinding Visualizer</Typography>\r\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n            <Select\r\n              native\r\n              label=\"Algorithm\"\r\n              onChange = {this.algorithmChange}\r\n              value = {this.state.algoValue}\r\n              style = {{backgroundColor:\"white\"}}\r\n              title = \"Select the algorithm to view how it works\"\r\n            >\r\n              <option value=\"Dijkstra\">Dijkstra</option>\r\n              <option value=\"A* algorithm\">A* algorithm</option>\r\n              <option value=\"BFS\">BFS</option>\r\n              <option value=\"DFS\">DFS</option>\r\n            </Select>\r\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n            <Button title = \"Visualizes the selected algorithm\" variant=\"contained\" style={{backgroundColor: \"#21b6ae\"}} onClick = {() => this.visualize(this.state.algoValue)}>\r\n              Visualize \r\n            </Button>\r\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n            <Button title = \"Clears the grid to default\" variant=\"contained\"  color=\"secondary\" onClick = {() => this.clearBoard()} >\r\n              Clear All\r\n            </Button>\r\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n            <Button title = \"Randomly places walls\" variant=\"contained\"  style = {{backgroundColor: \"#FFFF00\"}} onClick = {() => this.randomWall()} >\r\n              Random Walls\r\n            </Button>\r\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n            <Button title = \"Resets the grid to default and keeps walls\" variant=\"contained\"  color=\"primary\" onClick = {() => this.resetBoard()} >\r\n              Reset Nodes\r\n            </Button>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <Toolbar id=\"back-to-top-anchor\" />\r\n        </React.Fragment>\r\n        <h1></h1>\r\n        <div className = \"Wrapper\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx} className = \"rowWrapper\">\r\n                {row.map((node, nodeIdx) => {\r\n                  const {row, col, isFinish, isStart, isWall} = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      row={row}></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < rows; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < cols; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === start[0] && col === start[1],\r\n    isFinish: row === end[0] && col === end[1],\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst toggleStart = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isStart: !node.isStart,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst toggleEnd = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isFinish: !node.isFinish,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <PathfindingVisualizer></PathfindingVisualizer>\r\n      <h6>Work in Progress. More features coming soon.</h6>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}